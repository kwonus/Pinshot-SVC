// AVX-Quelle Grammar - Expressed in PEG
// Copyright (c) 2023, Kevin Wonus
// MIT License

// Short summary:
// command has multiple clauses and optional export/scope/macro support
// each clause is a standalone unit.  Search-Clauses have more granular units/syntax
// search-clause contains [>= 1] segments
// segments contain [>= 1] fragments
// fragments contain [>= 1] features
// fragments are used to match terms (i.e. word tokens) across the corpus being searched; match logic should consider all features of the fragment/token when deeming it to be matched
//
// Version: 2.0.3.708

WHITESPACE = _ { " " | "\t" | "\r" | "\n" }
statement = { singleton | macro_vector | vector }

invocation = ${ invoke ~ control_suffix? }
macro_vector = { IMPLICIT+ ~ apply }
vector = { (IMPLICIT+) ~ implicit_singletons? }
singleton = { exit | help | history | expand | delete | absorb | version | get | clear | reset | initialize }

IMPLICIT = _{ IMPLICIT_OTHER | IMPLICIT_SEARCH }
implicit_singletons = { (print ~ export?) | (export ~ print?) }
export = { (output | append | overwrite) }
IMPLICIT_SEARCH = _{ DELIMITER? ~ search }
IMPLICIT_OTHER = _{ filter | setting | invocation }
filter = { FILTER_OP ~ (bookName | bookNum) ~ (verse | chapter)? }

item = { (text | pos | pn_pos12 | pos32 | nupos | greek | hebrew | loc | seg | lemma | wildcard | punc | decoration | delta ) }
feature = { not? ~ item}
delta = { ^"/delta/" }

pn = { ^"/1p/" | ^"/2p/" | ^"/3p/" | "/indefinite/" }
noun = { ^"/noun/" | ^"/n/" }
verb = { ^"/verb/" | ^"/v/" }
adj = { ^"/adjective/" | ^"/adj/" }
adv = { ^"/adverb/" | ^"/adv/" }
det = { ^"/determiner/" | ^"/det/" }
art = { ^"/particle/" | ^"/part/" }

most = { noun | verb | adj | adv | det | art }

pro = { ^"/pronoun/" | ^"/pn/" }

pro_neuter = { ^"/pn_neuter/" }
pro_masculine = { ^"/pn_masculine/" | ^"/pn_male/" }
pro_feminine = { ^"/pn_feminine/" | ^"/pn_fem/" }

pro_genitive   = { ^"/pn_genitive/"   | ^"/pn_gen/" }
pro_nominative = { ^"/pn_nominative/" | ^"/pn_nom/" }
pro_objective  = { ^"/pn_objective/"  | ^"/pn_obj/" }
pro_reflexive  = { ^"/pn_reflexive/"  | ^"/pn_rfx/" }

pro_all = { pro | pro_neuter| pro_masculine | pro_feminine | pro_genitive | pro_nominative | pro_objective | pro_reflexive }

prep = { ^"/preposition/" | ^"/prep/" }
inter = { ^"/interjection/" | ^"/inter/" }
conj = { ^"/conjunction/" | ^"/conj/" }
num = { ^"/numeric/" | ^"/num/" }

more = { prep | inter | conj | num }

wh = { ^"/wh/" }
singular = { ^"/singular/" }
plural = { ^"/pural/" }
pos = { most | more | pro_all | wh | singular | plural | pn }

loc_bob = { ^"/BoB/" }
loc_eob = { ^"/EoB/" }
loc_boc = { ^"/BoC/" }
loc_eoc = { ^"/EoC/" }
loc_bov = { ^"/BoV/" }
loc_eov = { ^"/EoV/" }
loc = { loc_bob | loc_eob | loc_boc | loc_eoc | loc_bov | loc_eov }

seg_hsm = { ^"/Hsm/"  }
seg_csm = { ^"/Csm/"  }
seg_ssm = { ^"/Ssm/"  }
seg_any = { ^"/sm/"   }
seg = { seg_hsm | seg_csm | seg_ssm | seg_any }

punc_any      = { "/_/" }
punc_exclaim  = { "/!/" }
punc_question = { "/?/" }
punc_declare  = { "/./" }
punc_dash     = { "/-/" }
punc_semi     = { "/;/" }
punc_comma    = { "/,/" }
punc_colon    = { "/:/" }
punc_possessive = { "/\'/" }
punc_parenthetical = { "/(/" }
punc_parenthetical_close = { "/)/" }
punc = { punc_any | punc_question | punc_declare | punc_dash | punc_semi | punc_comma | punc_colon | punc_possessive | punc_parenthetical | punc_parenthetical_close }

italics = { ^"/italics/" }
jesus = { ^"/Jesus/" }

exit = { SINGLETON ~ ^"exit" }
help = { SINGLETON ~ ^"help" ~ topic? }
history = { SINGLETON ~ ^"review" ~ history_args? }

topic = ${ (HASHTAG | SINGLETON)? ~ (root_topics | group_topics) }
expand = { SINGLETON ~ ^"expand" ~ (label | historic) }
delete = { SINGLETON ~ ^"delete" ~ (label | historic) }
absorb = { SINGLETON ~ ^"absorb" ~ (label | historic) }
version = { SINGLETON ~ ^"version" }
reset = { SINGLETON ~ ^"reset" }
initialize = { SINGLETON ~ ^"initialize" ~ ^"history" }
get = { SINGLETON ~ ^"get" ~ var? }
clear = { SINGLETON ~ ^"clear" ~ var? }
var = { span_key | lexicon_key | display_key | match_key | format_key }

search = { ordered | unordered }   // quoted-searches are ordered // unquoted-searches are unordered

segment = { fragment ~ (AND ~ fragment)* } // Segments have >= 1 Unquoted (unordered) fragments <xor> have >= quoted (ordered) fragments
fragment = { feature+ } // Fragments have >= 1 features, separated by AND( & ) // A single token in a document must match all features to be deemed a full-match // partial-matches are not designed into the grammar

ordered = { QUOTE ~ (segment ~ (unanchored | segment)*) ~ QUOTE } // Quoted/Ordered segment
unanchored = { ellipsis ~ segment }
unordered = { segment+ }

control_suffix = ${ ^"::current" }     // seems to be bug in pest crate iff this is named "settings_option" instead of "control_suffix"
span_key = @{ ^"span" }
SPAN_VAR = _{ span_key }
span_var = { VAR ~ SPAN_VAR ~ SETTING ~ span_option }
span_set = { VAR ~ SPAN_VAR ~ EQUALS ~ span_option }
span_option = { DIGIT_le3 | span_verse | default }
span_verse = { ^"verse" }

lexicon_key = @{ ^"lexicon" }
LEXICON_VAR = _{ lexicon_key }
lexicon_var = { VAR ~ LEXICON_VAR ~ SETTING ~ lexicon_option }
lexicon_set = { VAR ~ LEXICON_VAR ~ EQUALS ~ lexicon_option }
lexicon_option = { LEXICONS | default }
LEXICONS = _{ av | avx | dual }  // very specific domain for the AVX driver/parser implementation
avx = { ^"modern" | "^avx" }
av = { ^"kjv" | ^"av" }
dual = { ^"dual" | ^"both" }

display_key = @{ ^"display" }
DISPLAY_VAR = _{ display_key }
display_var = { VAR ~ DISPLAY_VAR ~ SETTING ~ display_option }
display_set = { VAR ~ DISPLAY_VAR ~ EQUALS ~ display_option }
display_option = { DISPLAYS | default }
DISPLAYS = _{ av | avx }  // very specific domain for the AVX driver/parser implementation

match_key = @{ ^"similarity" }
MATCH_VAR = _{ match_key }
match_var = { VAR ~ MATCH_VAR ~ SETTING ~ match_option }
match_set = { VAR ~ MATCH_VAR ~ EQUALS ~ match_option }
match_option =${ ((FUZZY | EXACT) ~ disable_lemma_match) | NONE }
EXACT = ${ ^"exact" ~ "100" }
NONE = ${ ^"none" ~ "0" }
THIRTY_THREE_PLUS = ${ ("3" ~ ('3' .. '9')) }
THIRTY_SOMETHING = _{ THIRTY_THREE_PLUS }
FUZZY = ${ ( (('4' .. '9') ~ ('0' .. '9')) | ('1' .. '9') ) | THIRTY_SOMETHING } // legal thresholds are from 33 to 99 (100% is excluded because that would represent an exact-match


format_key = @{ ^"format" }
FORMAT_VAR = _{ format_key }
format_var = { VAR ~ FORMAT_VAR ~ SETTING ~ format_option }
format_set = { VAR ~ FORMAT_VAR ~ EQUALS ~ format_option }
format_option = { html | markdown | textual | json | default }
html = ${ ^"html" }
markdown = ${ ^"markdown" | ^"md" }
textual = ${ ^"text" }
json = ${ ^"json" }

print = { OPEN_BRACE ~ (DIGITS)* ~ CLOSE_BRACE }
cv = { chapter ~ COLON ~ verse }
book = { (bookName | bookNum)}
verse = { chapter ~ COLON ~ DIGIT_byte }
chapter = { COLON ~ DIGIT_byte }
bookName = { ALPHA+ | (onetwothree ~ ALPHA+) }
onetwothree = { ('1' .. '3') }
bookNum  = ${ ('1' .. '9') | (('1' .. '5') ~ DIGIT) ~ ( "6" ~ ('1' .. '6')) } // 1-66
negate = { "-:" }
setting = { span_var | span_set | lexicon_var | lexicon_set | display_var | display_set | match_var | match_set | format_var | format_set }
apply = { "||" ~ label} // macro is a Rust keyword and cannot be used in here
label = ${ ('a' .. 'z' | 'A' .. 'Z') ~ (('a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | "-" | "_")+)? }
historic = ${ ('1' .. '9') ~ ( '0' .. '9')* }
invoke = ${ DOLLAR ~ (label | historic) }

decoration = { italics | jesus }
pos32 = ${ "#" ~ HEX32 }
pn_pos12 = ${ "#" ~ HEX16 }
greek = ${ DIGITS ~ ^":G" }
hebrew = ${ DIGITS ~ ^":H" }

lemma = { "\\" ~ text ~ "\\" }
wildcard = ${ (text ~ "*" ~ text) | ("*" ~text) | (text ~ "*" ) }
ELLIPSIS = @{ "..." }
ellipsis = _{ "..." }

append = { ">>" ~ filename }
output = { ">" ~ filename }
overwrite = { "=>" ~ filename }

FILESPEC = _{ ('a' .. 'z' | 'A' .. 'Z' | '0' .. '9') | "/" | "\\" | "-" | "_" | ":" }
quoted_filespec = ${ QUOTE ~ FILESPEC ~ (FILESPEC | " ") + ~ QUOTE }
unquoted_legal = { FILESPEC+ }
filename = { quoted_filespec | unquoted_legal }

// SEARCH
TOPIC_FIND = @{ ^"FIND" } // 1
TOPIC_FILTER = @{ ^"FILTER" } // 2
// CONTROL
TOPIC_SET = @{ ^"SET" } // 3
TOPIC_CLEAR = @{ ^"CLEAR" } // 4
TOPIC_GET = @{ ^"GET" } // 5
TOPIC_RESET = @{ ^"RESET" } // 6
TOPIC_ABSORB = @{ ^"ABSORB" } // 7
//OUTPUT
TOPIC_LIMIT = @{ ^"LIMIT" | ^"SHOW" } // 8 // show is deprecated verb for limit
TOPIC_EXPORT = @{ ^"EXPORT" } // 9
// SYSTEM
TOPIC_HELP = @{ ^"HELP" } // 10
TOPIC_VERSION = @{ ^"VERSION" } // 11
TOPIC_EXIT = @{ ^"EXIT" } // 12
// HISTORY & LABELING
TOPIC_INVOKE = @{ ^"INVOKE" } // 13
TOPIC_APPLY = @{ ^"APPLY" }   // 14
TOPIC_DELETE = @{ ^"DELETE" } // 10
TOPIC_EXPAND = @{ ^"EXPAND" } // 11
TOPIC_REVIEW = @{ ^"REVIEW" } // 16
TOPIC_INIT = @{ ^"INITIALIZE" } // 17 **
root_topics = { TOPIC_FIND | TOPIC_FILTER | TOPIC_SET | TOPIC_CLEAR | TOPIC_GET | TOPIC_RESET | TOPIC_ABSORB | TOPIC_LIMIT | TOPIC_EXPORT | TOPIC_HELP | TOPIC_VERSION | TOPIC_EXIT | TOPIC_INVOKE | TOPIC_APPLY | TOPIC_DELETE | TOPIC_EXPAND | TOPIC_REVIEW | TOPIC_INIT }

GROUP_TOPIC_SEARCH = @{ ^"SEARCH" }
GROUP_TOPIC_CONTROL = @{ ^"CONTROL" | ^"SETTINGS" }
GROUP_TOPIC_OUTPUT = @{ ^"OUTPUT" }
GROUP_TOPIC_SYSTEM = @{ ^"SYSTEM" }
GROUP_TOPIC_HISTORY_AND_LABELING = @{ ^"HISTORY" | ^"MACRO" | ^"LABEL" | ^"LABELING" | ^"LABELLING" }
group_topics = { GROUP_TOPIC_SYSTEM | GROUP_TOPIC_OUTPUT | GROUP_TOPIC_CONTROL | GROUP_TOPIC_SEARCH | GROUP_TOPIC_HISTORY_AND_LABELING }

nupos = {
	^"#a-acp" |
	^"#av" |
	^"#av-an" |
	^"#av-c" |
	^"#avc-jn" |
	^"#av-d" |
	^"#av-dc" |
	^"#av-ds" |
	^"#av-dx" |
	^"#av-j" |
	^"#av-jc" |
	^"#av-jn" |
	^"#av-js" |
	^"#av-n1" |
	^"#av-s" |
	^"#avs-jn" |
	^"#av-vvg" |
	^"#av-vvn" |
	^"#av-x" |
	^"#c-acp" |
	^"#cc" |
	^"#cc-acp" |
	^"#c-crq" |
	^"#ccx" |
	^"#crd" |
	^"#cs" |
	^"#cst" |
	^"#d" |
	^"#dc" |
	^"#dg" |
	^"#ds" |
	^"#dt" |
	^"#dx" |
	^"#fw-es" |
	^"#fw-fr" |
	^"#fw-ge" |
	^"#fw-gr" |
	^"#fw-it" |
	^"#fw-la" |
	^"#fw-mi" |
	^"#j" |
	^"#j-av" |
	^"#jc" |
	^"#jc-jn" |
	^"#jc-vvg" |
	^"#jc-vvn" |
	^"#j-jn" |
	^"#j-u" |
	^"#j-vvnu" |
	^"#jp" |
	^"#js" |
	^"#js-jn" |
	^"#js-vvg" |
	^"#js-vvn" |
	^"#j-vvg" |
	^"#j-vvn" |
	^"#n1" |
	^"#n1-an" |
	^"#n1-j" |
	^"#n11vbz" |
	^"#n2" |
	^"#n2-acp" |
	^"#n2-an" |
	^"#n2-av" |
	^"#n2-dx" |
	^"#n2-j" |
	^"#n2-jn" |
	^"#n2-vdg" |
	^"#n2-vhg" |
	^"#n2-vvg" |
	^"#n2-vvn" |
	^"#ng1" |
	^"#ng1-an" |
	^"#ng1-j" |
	^"#ng1-jn" |
	^"#ng1-vvn" |
	^"#ng2" |
	^"#ng2-jn" |
	^"#n-jn" |
	^"#njp" |
	^"#njp2" |
	^"#njpg1" |
	^"#njpg2" |
	^"#np1" |
	^"#np2" |
	^"#npg1" |
	^"#npg2" |
	^"#np-n1" |
	^"#np-n2" |
	^"#np-ng1" |
	^"#np1-n" |
	^"#n-vdg" |
	^"#n-vhg" |
	^"#n-vvg" |
	^"#n-vvn" |
	^"#ord" |
	^"#p-acp" |
	^"#pc-acp" |
	^"#pi" |
	^"#pi2" |
	^"#pi2x" |
	^"#pig" |
	^"#pigx" |
	^"#pix" |
	^"#pn22" |
	^"#pn31" |
	^"#png11" |
	^"#png12" |
	^"#png21" |
	^"#png22" |
	^"#png31" |
	^"#png32" |
	^"#pno11" |
	^"#pno12" |
	^"#pno21" |
	^"#pno31" |
	^"#pno32" |
	^"#pns11" |
	^"#pns12" |
	^"#pns21" |
	^"#pns31" |
	^"#pns32" |
	^"#po11" |
	^"#po12" |
	^"#po21" |
	^"#po22" |
	^"#po31" |
	^"#po32" |
	^"#pp" |
	^"#pp-f" |
	^"#px11" |
	^"#px12" |
	^"#px21" |
	^"#px22" |
	^"#px31" |
	^"#px32" |
	^"#pxg21" |
	^"#q-crq" |
	^"#r-crq" |
	^"#ro-crq" |
	^"#qo-crq" |
	^"#rg-crq" |
	^"#n-crq" |
	^"#sy" |
	^"#uh" |
	^"#uh-av" |
	^"#uh-crq" |
	^"#uh-dx" |
	^"#uh-j" |
	^"#uh-jn" |
	^"#uh-np" |
	^"#uh-n" |
	^"#uh-v" |
	^"#uh-x" |
	^"#vb2" |
	^"#vb2-imp" |
	^"#vb2r" |
	^"#vb2x" |
	^"#vbb" |
	^"#vbbx" |
	^"#vbd" |
	^"#vbds" |
	^"#vbd2s" |
	^"#vbdr" |
	^"#vbd2r" |
	^"#vbd2" |
	^"#vbd2x" |
	^"#vbdp" |
	^"#vbdx" |
	^"#vbg" |
	^"#vbi" |
	^"#vbm" |
	^"#vbmx" |
	^"#vbn" |
	^"#vbp" |
	^"#vbr" |
	^"#vbz" |
	^"#vbzx" |
	^"#vd2" |
	^"#vd2-imp" |
	^"#vd2x" |
	^"#vdb" |
	^"#vdbx" |
	^"#vdd" |
	^"#vdd2" |
	^"#vdd2x" |
	^"#vddp" |
	^"#vddx" |
	^"#vdg" |
	^"#vdi" |
	^"#vdn" |
	^"#vdp" |
	^"#vdz" |
	^"#vdzx" |
	^"#vh2" |
	^"#vh2-imp" |
	^"#vh2x" |
	^"#vhb" |
	^"#vhbx" |
	^"#vhd" |
	^"#vhd2" |
	^"#vhdp" |
	^"#vhdx" |
	^"#vhg" |
	^"#vhi" |
	^"#vhn" |
	^"#vhp" |
	^"#vhz" |
	^"#vhzx" |
	^"#vm2" |
	^"#vm2x" |
	^"#vmb" |
	^"#vmb1" |
	^"#vmbx" |
	^"#vmd" |
	^"#vm2" |
	^"#vmd2" |
	^"#vmd2x" |
	^"#vmdp" |
	^"#vmdx" |
	^"#vmi" |
	^"#vmn" |
	^"#vmp" |
	^"#vv2" |
	^"#vv2-imp" |
	^"#vv2x" |
	^"#vvb" |
	^"#vvbx" |
	^"#vvd" |
	^"#vvd2" |
	^"#vvd2x" |
	^"#vvdp" |
	^"#vvdx" |
	^"#vvg" |
	^"#vvi" |
	^"#vvn" |
	^"#vvp" |
	^"#vvz" |
	^"#vvzx" |
	^"#xx" |
	^"#zz" }

text = ${ ALPHA+ }
not = ${ "-:" }
disable_lemma_match = { "!" }

history_args = { (history_range ~ history_max?) | (history_max ~ history_range?) }
history_since = { ^"since" ~ history_date }
history_until = { ^"until" ~ history_date }
history_range = { (history_since ~ history_until?) | (history_until ~ history_since?) }
history_max = { DIGITS }
history_date = ${ "20" ~ DIGIT ~ DIGIT ~ "/" ~ DIGIT ~ DIGIT ~ "/" ~ DIGIT ~ DIGIT }

DIGIT = _{ '0' .. '9' }
HEX = _{ DIGIT | ('a' .. 'f') | ('A' .. 'F') }
DIGITS = ${ DIGIT+ }
DIGIT_ge5 = ${DIGIT ~ DIGIT ~ DIGIT ~ DIGIT ~ DIGIT+ }
DIGIT_le2 = ${DIGIT ~ DIGIT? }
DIGIT_le3 = ${DIGIT ~ DIGIT ~ DIGIT? }
DIGIT_byte = ${ (("0" | "1" | "2") ~ DIGIT ~ DIGIT) | (DIGIT ~ DIGIT?) }
HEX16 = ${ HEX ~ HEX ~ HEX ~ HEX }
HEX32 = ${ HEX ~ HEX ~ HEX ~ HEX ~ HEX ~ HEX ~ HEX ~ HEX }
ALPHA = _{ 'a' .. 'z' | 'A' .. 'Z' }
AND = _{ "&" }
OR = _{ "|" }
DELIMITER = _{ "+" | ";" }
EQUALS = _{ "=" }
OPEN_BRACE = _{ "[" }
CLOSE_BRACE = _{ "]" }
DOLLAR = _{ "$" }
FILTER_OP = _{ "<" }
QUOTE = _{ "\"" }
COLON = _{ ":" }
SETTING = _{ "::" }
SPACE = _{ " " }
VAR = _{ "%" }
SINGLETON = _{ "@" }
HASHTAG = _{ "@" }
default = ${ ^"default" }

